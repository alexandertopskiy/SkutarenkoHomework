import Foundation

// MARK: - –î–æ–º–∞—à–∫–∞

//1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ö–æ–º–Ω–∞—Ç–∞. –£ –∫–æ–º–Ω–∞—Ç—ã –µ—Å—Ç—å —Ä–∞–∑–º–µ—Ä—ã W –Ω–∞ H. –ò —Å–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –ü–µ—Ä—Å–æ–Ω–∞–∂. –£ –Ω–µ–≥–æ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ
//2. –ü–µ—Ä—Å–æ–Ω–∞–∂—É –¥–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –∏–¥—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —ç–Ω—É–º—á–∏–∫ –ª–µ–≤–æ, –ø—Ä–∞–≤–æ, –≤–µ—Ä—Ö, –≤–Ω–∏–∑. –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ–¥–≤–∏–≥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏ –ø–æ–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏
//3. –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø –Ø—â–∏–∫. –£ —è—â–∏–∫–∞ —Ç–∞–∫–∂–µ –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ X –∏ Y. –Ø—â–∏–∫ —Ç–∞–∫–∂–µ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–¥–∞—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã –∏ —è—â–∏–∫ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞—Å–ø–µ—á–∞—Ç–∞–Ω –≤–º–µ—Å—Ç–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—á–∞—Ç–∏.
//4. –¢–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ, –ø–µ—Ä—Å–æ–Ω–∞–∂ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å —è—â–∏–∫, –µ—Å–ª–∏ –æ–Ω —Å—Ç–æ–∏—Ç –Ω–∞ —Ç–æ–º –º–µ—Å—Ç–µ, –∫—É–¥–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Ö–æ—á–µ—Ç –ø–æ–ø–∞—Å—Ç—å. –ì–ª–∞–≤–Ω–æ–µ —á—Ç–æ –Ω–∏ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–µ–ª—ã –∫–æ–º–Ω–∞—Ç—ã. –ü–æ–¥–≤–∏–≥–∞–π—Ç–µ —è—â–∏–∫ :)
//5. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ—á–∫—É –≤ –∫–æ–º–Ω–∞—Ç–µ, –∫—É–¥–∞ –Ω–∞–¥–æ —è—â–∏–∫ –ø–µ—Ä–µ–¥–≤–∏–Ω—É—Ç—å –∏ –¥–≤–∏–≥–∞–π—Ç–µ :)
//–î–ª—è —Å—É–ø–µ—Ä–º–µ–Ω–æ–≤: –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Å–∏–≤ —è—â–∏–∫–æ–≤ –∏ –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∫–æ–Ω—Å–æ–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

// IDEAS : –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ –∫–ª–∞—Å—Å—ã, –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å-–∫–ª–µ—Ç–∫—É —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ (–ø—É—Å—Ç–∞—è/—è—â–∏–∫/—á–µ–ª–æ–≤–µ–∫/—Ç–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è/—Ç—É–ø–∏–∫)

enum Direction {
    case left
    case right
    case up
    case down
}

enum ErrorType {
    case wrongCommand
    case boxAhead
    case onTheBorder
    case outOfRoom
    case unknownError
}

struct Box {
    var x: Int
    var y: Int
    static var imageOfBox : String = "üì¶"
}

struct DestinationCell {
    var x: Int
    var y: Int
    var imageOfDestinationCell : String = "‚úÖ"
}

struct Room {
    var w: Int
    var h: Int
    static var imageOfEmptyCell : String = "‚óΩÔ∏è"
    static var winningCell : String = "üéÅ"
    func showRoom(person: Person, arrayOfBoxes: [Box], destinationCell cell: DestinationCell) {
        for y in 1...self.h {
            var str = ""
            for x in 1...self.w {
                if (x == person.x && y == self.h - person.y + 1) {
                    str += Person.imageOfPerson
                }
                else if (x == cell.x && y == self.h - cell.y + 1){
                    str += cell.imageOfDestinationCell
                }
                else if (arrayOfBoxes.contains { box in
                    if case x = box.x, y == self.h - box.y + 1 {
                        return true
                    } else {
                        return false
                    }
                }) {
                    str += Box.imageOfBox
                }
                else {
                    str += Room.imageOfEmptyCell
                }
            }
            print(str)
        }
    }
    func showWinningRoom(person: Person) {
        for y in 1...self.h {
            var str = ""
            for x in 1...self.w {
                if (x == person.x && y == self.h - person.y + 1) {
                    str += Person.imageOfPerson
                } else {
                    str += Room.winningCell
                }
            }
            print(str)
        }
    }
}

struct Person {
    var name: String
    var x: Int
    var y: Int
    static var imageOfPerson : String = "üíÅ‚Äç‚ôÇÔ∏è"
        
    mutating func moveTo(toDirection: Direction, inRoom room: Room, withBoxes boxes: inout [Box], withDestCell cell: DestinationCell) -> Bool {
        var wasMoved : Bool = false
        for (i,box) in boxes.enumerated() {
            switch toDirection {
            case .left:
                if (self.x - 1 > 0) {
                    if (box.x == self.x - 1 && box.y == self.y) { // –≤ —Ç–æ—á–∫–µ, –∫—É–¥–∞ –∏–¥–µ–º, –ª–µ–∂–∏—Ç –∫–æ—Ä–æ–±–∫–∞
                        for otherBox in boxes { // –µ—Å–ª–∏ –¥–≤–∏–≥–∞–µ–º –≤ –∫–ª–µ—Ç–∫—É, –≥–¥–µ –ª–µ–∂–∏—Ç –¥—Ä—É–≥–∞—è –∫–æ—Ä–æ–±–∫–∞
                            if (otherBox.x == box.x - 1 && otherBox.y == box.y) {
                                return printError(errorType: .boxAhead)
                            }
                        }
                        if (box.x - 1 > 0) { // –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞, –∫—É–¥–∞ –¥–≤–∏–≥–∞–µ–º –ª–µ–∂–∏—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–º–Ω–∞—Ç—ã
                            self.x -= 1
                            boxes[i].x -= 1
                            wasMoved = true
                        } else {
                            return printError(errorType: .onTheBorder)
                        }
                    } else if (!wasMoved && i == boxes.count - 1) { // –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏, –∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ —à–∞–≥–∞–µ–º
                        self.x -= 1
                        wasMoved = true
                    }
                } else {
                    return printError(errorType: .outOfRoom)
                }
            case .right:
                if (self.x + 1 <= room.w) {
                    if (box.x == self.x + 1 && box.y == self.y) { // –≤ —Ç–æ—á–∫–µ, –∫—É–¥–∞ –∏–¥–µ–º, –ª–µ–∂–∏—Ç –∫–æ—Ä–æ–±–∫–∞
                        for otherBox in boxes { // –µ—Å–ª–∏ –¥–≤–∏–≥–∞–µ–º –≤ –∫–ª–µ—Ç–∫—É, –≥–¥–µ –ª–µ–∂–∏—Ç –¥—Ä—É–≥–∞—è –∫–æ—Ä–æ–±–∫–∞
                            if (otherBox.x == box.x + 1 && otherBox.y == box.y) {
                                return printError(errorType: .boxAhead)
                            }
                        }
                        if (box.x + 1 <= room.w) { // –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞, –∫—É–¥–∞ –¥–≤–∏–≥–∞–µ–º –ª–µ–∂–∏—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–º–Ω–∞—Ç—ã
                            self.x += 1
                            boxes[i].x += 1
                            wasMoved = true
                        } else {
                            return printError(errorType: .onTheBorder)
                        }
                    } else if (!wasMoved && i == boxes.count - 1) { // –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏, –∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ —à–∞–≥–∞–µ–º
                        self.x += 1
                        wasMoved = true
                    }
                } else {
                    return printError(errorType: .outOfRoom)
                }
            case .up:
                if (self.y + 1 <= room.h) {
                    if (box.x == self.x && box.y == self.y + 1) { // –≤ —Ç–æ—á–∫–µ, –∫—É–¥–∞ –∏–¥–µ–º, –ª–µ–∂–∏—Ç –∫–æ—Ä–æ–±–∫–∞
                        for otherBox in boxes { // –µ—Å–ª–∏ –¥–≤–∏–≥–∞–µ–º –≤ –∫–ª–µ—Ç–∫—É, –≥–¥–µ –ª–µ–∂–∏—Ç –¥—Ä—É–≥–∞—è –∫–æ—Ä–æ–±–∫–∞
                            if (otherBox.x == box.x && otherBox.y == box.y + 1) {
                                return printError(errorType: .boxAhead)
                            }
                        }
                        if (box.y + 1 <= room.h) { // –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞, –∫—É–¥–∞ –¥–≤–∏–≥–∞–µ–º –ª–µ–∂–∏—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–º–Ω–∞—Ç—ã
                            self.y += 1
                            boxes[i].y += 1
                            wasMoved = true
                        } else {
                            return printError(errorType: .onTheBorder)
                        }
                    } else if (!wasMoved && i == boxes.count - 1) { // –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏, –∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ —à–∞–≥–∞–µ–º
                        self.y += 1
                        wasMoved = true
                    }
                } else {
                    return printError(errorType: .outOfRoom)
                }
                
            case .down:
                if (self.y - 1 > 0) {
                    if (box.x == self.x && box.y == self.y - 1) { // –≤ —Ç–æ—á–∫–µ, –∫—É–¥–∞ –∏–¥–µ–º, –ª–µ–∂–∏—Ç –∫–æ—Ä–æ–±–∫–∞
                        for otherBox in boxes { // –µ—Å–ª–∏ –¥–≤–∏–≥–∞–µ–º –≤ –∫–ª–µ—Ç–∫—É, –≥–¥–µ –ª–µ–∂–∏—Ç –¥—Ä—É–≥–∞—è –∫–æ—Ä–æ–±–∫–∞
                            if (otherBox.x == box.x && otherBox.y == box.y - 1) {
                                return printError(errorType: .boxAhead)
                            }
                        }
                        if (box.y - 1 > 0) { // –µ—Å–ª–∏ –∫–ª–µ—Ç–∫–∞, –∫—É–¥–∞ –¥–≤–∏–≥–∞–µ–º –ª–µ–∂–∏—Ç –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–º–Ω–∞—Ç—ã
                            self.y -= 1
                            boxes[i].y -= 1
                            wasMoved = true
                        } else {
                            return printError(errorType: .onTheBorder)
                        }
                    } else if (!wasMoved && i == boxes.count - 1) { // –µ—Å–ª–∏ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –∫–æ—Ä–æ–±–∫–∏, –∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è, —Ç–æ –ø—Ä–æ—Å—Ç–æ —à–∞–≥–∞–µ–º
                        self.y -= 1
                        wasMoved = true
                    }
                } else {
                    return printError(errorType: .outOfRoom)
                }
            }
        }
        if wasMoved { // —Å–¥–≤–∏–Ω—É–ª—Å—è –ª–∏ —á–µ–ª–æ–≤–µ–∫ –∏/–∏–ª–∏ –∫–æ—Ä–æ–±–∫–∞
            var indexOfEaten : Int?
            for (i,box) in boxes.enumerated() {
                if (box.x == cell.x && box.y == cell.y) { // –µ—Å–ª–∏ —É–±—Ä–∞–ª–∏ –∫–æ—Ä–æ–±–∫—É, —Ç–æ —É–¥–∞–ª–∏—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞
                    indexOfEaten = i
                }
            }
            // —Å—ä–µ–ª–∏ —É–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —è—â–∏–∫ –≤ –º–∞—Å—Å–∏–≤–µ? –ø–æ–±–µ–¥–∏–ª–∏! –Ω–µ—Ç? —É–±—Ä–∞—Ç—å –∏–∑ –º–∞—Å—Å–∏–≤–∞
            if let index = indexOfEaten {
                if (boxes.count == 1) {
                    print("\n CONGRATULATIONS, \(self.name)! YOU WON!!!")
                    room.showWinningRoom(person: self)
                    return true
                } else {
                    boxes.remove(at: index)
                    print("\n YOU JUST ATE A BOX! \(boxes.count) LEFT!!!")
                }
            }
            print("\n New position: ")
            room.showRoom(person: self, arrayOfBoxes: boxes, destinationCell: cell)
        }
        return false
    }
}

//–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç/—Ä–∞–∑–º–µ—Ä–∞ (—Ç—é–ø–ª –∏–∑ –¥–≤—É—Ö –∏–Ω—Ç–æ–≤)
func checkInput(input: String, range: ClosedRange<Int>) -> (a: Int, b: Int)? {
    let arr = Array(input)
    func index() -> Int? {
        for (i,num) in arr.enumerated() {
            if (num == ",") {
                return i
            }
        }
        return nil
    }
    if let i = index() {
        if (arr.count > i + 1) && (i > 0) {
            let a = arr.prefix(upTo: i)
            let b = arr.suffix(from: i+1)
            if let x = Int(String(a)), let y = Int(String(b)) {
                switch (x,y) {
                case let(x,y) where (x <= 0 || y <= 0):
                    print(" input incorrect! coords should be positive! ")
                    return nil
                case let(x,y) where (x > range.upperBound || y > range.upperBound):
                    print(" input incorrect! it's too big room!")
                    return nil
                case let(x,y) where (x < range.lowerBound || y < range.lowerBound):
                    print(" input incorrect! it's too small room! ")
                    return nil
                default:
                    return (x,y)
                }
            }
        }
    }
    print("input incorrect! please enter data like 'a,b'")
    return nil
}

//–≤—ã–≤–æ–¥ –æ—à–∏–±–æ–∫
//@discardableResult - –º—ã –º–æ–∂–µ–º –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
@discardableResult func printError(errorType: ErrorType) -> Bool {
    switch errorType {
        case .wrongCommand: print("there's no such action! please repeat enter")
        case .boxAhead: print("error! you can't move the box, because there's other one ahead of this one!")
        case .onTheBorder: print("error! you can't move the box, because it's on the border of room!")
        case .outOfRoom: print("error! this position is out of room!")
        case .unknownError: print("unknown error!")
    }
    return false
}

var globalName : String = ""
var room : Room = Room(w: 0, h: 0)
var countOfBoxes : Int = 0
var arrayOfBoxes : [Box] = []
var isGameOver = false

while !isGameOver {
    print("\n Hi! Please tell us your name and set up settings for game!")
    
    // MARK: - –£–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è
    while true {
        print("\n Your name: ", terminator: "")
        if let name = readLine() {
            print("\n Hello, \(name)!")
            globalName = name
            break
        } else {
            printError(errorType: .unknownError)
        }
    }
    
    // MARK: - –ó–∞–¥–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–æ–º–Ω–∞—Ç—ã
    while true { // –≤–≤–æ–¥–∏—Ç—å, –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        print("\n Size of room in 'x,y' format (positive numbers, in range [4;25]): ", terminator: "")
        if let coords = readLine() { // –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–≤–µ–ª–∏
            if let x = checkInput(input: coords, range: 4...25) { // –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –≤–µ—Ä–Ω–æ
                room = Room(w: x.a, h: x.b)
                break
            }
        } else {
            printError(errorType: .unknownError)
        }
    }
                    
    // MARK: - –ó–∞–¥–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —á–µ–ª–æ–≤–µ–∫–∞/—á–∏—Å–ª–æ –∫–æ—Ä–æ–±–æ–∫ –∏ –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã /—Ç–æ—á–∫—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ, –Ω–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–∫–∞—Ö
    // MARK: - –ó–∞–¥–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å (—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ–±–æ–∫ –±—É–¥–µ—Ç)
    // TODO: - –ù–ê–°–¢–†–û–ò–¢–¨ –õ–û–ì–ò–ö–£ –ü–û–°–¢–†–û–ï–ù–ò–Ø (–ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–∞–∑–º–µ—Ä–µ —Å–≤–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ —è—â–∏–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ + –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ)
    
    let personX = Int.random(in: 1...room.w)
    let personY = Int.random(in: 1...room.h)
    var person = Person(name: globalName, x: personX, y: personY)
    var (destinationX,destinationY) = (1,1)
    
    repeat {
        destinationX = Int.random(in: 1...room.w)
        destinationY = Int.random(in: 1...room.h)
    } while (personX,personY) == (destinationX,destinationY)
    let destCell = DestinationCell(x: destinationX, y: destinationY)
    
    countOfBoxes = Int.random(in: 1...room.w)
    
    // MARK: - –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ–±–∫—É(–∏)
    // MARK: - –£—Å–ª–æ–≤–∏—è:
    // –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–æ—á–∫–∏ —Å—Ç–∞—Ä—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
    // –æ—Ç–ª–∏—á–∏–µ –æ—Ç —Ç–æ—á–∫–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    // –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ª–æ–∂–µ–Ω–∏—è –∫–æ—Ä–æ–±–æ–∫, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Å–∫–æ–ª—å–∫–æ
    // –Ω–µ —Å—Ç–∞–≤–∏—Ç—å –∫–æ—Ä–æ–±–∫–∏ –≤ —É–≥–ª—ã
    // x –∫–æ—Ä–æ–±–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å 1 –∏–ª–∏ Count, –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ç–æ–π –∂–µ –• –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
    // y –∫–æ—Ä–æ–±–∫–∏ –º–æ–∂–µ—Ç –±—ã—Ç—å 1 –∏–ª–∏ Count, –µ—Å–ª–∏ —Ç–æ—á–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Ç–æ–π –∂–µ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
    
    var boxX, boxY: Int
    
    for _ in 1...countOfBoxes {
        checkCorrectCoordsLoop: repeat {
            boxX = Int.random(in: 1...room.w)
            boxY = Int.random(in: 1...room.h)
            
            switch (x: boxX,y: boxY) {
                case let box where box == (personX,personY): continue checkCorrectCoordsLoop
                case let box where box == (destinationX,destinationY): continue checkCorrectCoordsLoop
                case let box where box == (1,1): continue checkCorrectCoordsLoop
                case let box where box == (room.w,1): continue checkCorrectCoordsLoop
                case let box where box == (room.w,room.h): continue checkCorrectCoordsLoop
                case let box where box == (1,room.h): continue checkCorrectCoordsLoop
                case let (x,_) where (x == 1 && destinationX != 1) || (x == room.w && destinationX != room.w): continue checkCorrectCoordsLoop
                case let (_,y) where (y == 1 && destinationY != 1) || (y == room.h && destinationY != room.h): continue checkCorrectCoordsLoop
                default: break
            }
            
            if (countOfBoxes > 1) {
                // –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏, —Ç–æ —Å–º–æ—Ç—Ä–∏–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —è—â–∏–∫–∞ –≤ –º–∞—Å—Å–∏–≤–µ
                for boxInArr in arrayOfBoxes {
                    if (boxInArr.x == boxX && boxInArr.y == boxY) { // –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–æ—Ö–æ–∂—É—é, —Ç–æ –∑–∞–ø—É—Å–∫–∞–µ–º –≤–µ—Å—å —Ü–∏–∫–ª –∑–∞–Ω–æ–≤–æ
                        continue checkCorrectCoordsLoop
                    }
                }
            }
            break // –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏, —Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        } while true
        arrayOfBoxes.append(Box(x: boxX, y: boxY))
    }

    print(" array of boxes: ")
    for (i,box) in arrayOfBoxes.enumerated() {
        print(" \(i+1)) \(box.x),\(box.y)")
    }

    // MARK: - –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫–æ–º–Ω–∞—Ç—ã
    print("\n Current room: ")
    room.showRoom(person: person, arrayOfBoxes: arrayOfBoxes, destinationCell: destCell)
    
    // MARK: - –°–∞–º–∞ –∏–≥—Ä–∞
    gameLoop: while true { // –≤–≤–æ–¥–∏—Ç—å, –ø–æ–∫–∞ –Ω–µ –≤–≤–µ–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        print("\n Print direction for man (UP - W, DOWN - S, LEFT - A, RIGHT - D) or quit (Q) game: ", terminator: "")
        if let action = readLine() { // –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –≤–≤–µ–ª–∏
            switch action.lowercased() {
            case "w","—Ü":
                if person.moveTo(toDirection: .up, inRoom: room, withBoxes: &arrayOfBoxes, withDestCell: destCell) {
                    break gameLoop
                }
            case "s","—ã":
                if person.moveTo(toDirection: .down, inRoom: room, withBoxes: &arrayOfBoxes, withDestCell: destCell) {
                    break gameLoop
                }
            case "a","—Ñ":
                if person.moveTo(toDirection: .left, inRoom: room, withBoxes: &arrayOfBoxes, withDestCell: destCell) {
                    break gameLoop
                }
            case "d","–≤":
                if person.moveTo(toDirection: .right, inRoom: room, withBoxes: &arrayOfBoxes, withDestCell: destCell) {
                    break gameLoop
                }
            case "q","–π": break gameLoop
            default: printError(errorType: .wrongCommand)
            }
            for box in arrayOfBoxes {
                if (box.x,box.y) == (1,1) || (box.x,box.y) == (room.w,1) || (box.x,box.y) == (1,room.h) || (box.x,box.y) == (room.w,room.h) {
                    print("the box is stuck! game over, \(person.name)!")
                    break gameLoop
                }
            }

        }
    }
    
    // MARK: - –°—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?
    isGameOverLoop: while true {
        print("\nDo you wanna play one more time? (yes/no): ", terminator: "")
        if let gameAgain = readLine() {
            switch gameAgain.lowercased() {
            case "yes","–¥–∞","y","–¥":
                globalName = ""
                room = Room(w: 0, h: 0)
                countOfBoxes  = 0
                arrayOfBoxes.removeAll()
                person = Person(name: globalName, x: 0, y: 0)
                
                break isGameOverLoop
            case "no","–Ω–µ—Ç","n","–Ω":
                isGameOver = true
                break isGameOverLoop
            default: printError(errorType: .wrongCommand)
            }
        }
    }
}
