import UIKit

// MARK: - 17 - –°–∞–±—Å–∫—Ä–∏–ø—Ç—ã (–ò–Ω–¥–µ–∫—Å—ã)

// MARK: - –°–∫—É—Ç–∞—Ä–µ–Ω–∫–æ

let array = ["a","b","c","d","e"]
array[0] // —Å–∞–±—Å–∫—Ä–∏–ø—Ç (–æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ –∏–Ω–¥–µ–∫—Å—É)
array[1]
array[2]

struct Family {
    var father = "Father"
    var mother = "Mother"
    var kids = ["Kid-1","Kid-2","Kid-3"]
    
    var count : Int {
        return 2 + kids.count
    }
    
    subscript(index: Int) -> String? {
        get {
            switch index {
            case 0: return father
            case 1: return mother
            case 2..<(2 + kids.count): return kids[index - 2]
            default: return nil
            }
        }
        set {
            let value = newValue ?? ""
            switch index {
            case 0: father = value
            case 1: mother = value
            case 2..<(2 + kids.count): kids[index - 2] = value
            default: break
            }
        }
    }
    
    // MARK: - –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ–≥—Ä—É–∑–∫—É (overloading) —Å–∞–±—Å–∫—Ä–∏–ø—Ç–∞, —Ç–æ –µ—Å—Ç—å –æ–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ –≤—Ö–æ–¥–Ω—ã–º–∏/–≤—ã—Ö–æ–¥–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    subscript(index: Int, suffix: String) -> String? {
        var name = self[index] ?? ""
        name += " " + suffix
        return name
    }
    
}

var family = Family()
family.count
family[0]
family[2]
family[5]

family[0] = "Dad"
family.father
family[0]

family[2] = "Bob"
family[2]
family.kids[0]

family[2, "& Bib"]


struct ChessField {
    
    var dict = [String:String]()
    
    func keyFor(column: String, row: Int) -> String {
        return column + String(row)
    }
    
    subscript(column: String, row: Int) -> String? {
        get {
            return dict[keyFor(column: column, row: row)]
        }
        set {
            dict[keyFor(column: column, row: row)] = newValue
        }
    }
}

var field = ChessField()
field["a",5]
field["a",5] = "King"
field["a",5]

// MARK: - Apple

struct  TimesTable{
    let multiplier: Int
    subscript(index: Int) -> Int {
        return multiplier * index
    }
}

let what = 3
let byWhat = 5

let threeTimesTable = TimesTable(multiplier: what)
//print("\(what) —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ \(byWhat) –±—É–¥–µ—Ç \(threeTimesTable[byWhat])")

var numberOfLegs = ["–ø–∞—É–∫": 8, "–º—É—Ä–∞–≤–µ–π": 6, "–∫–æ—à–∫–∞": 4]
numberOfLegs["–ø—Ç–∏—á–∫–∞"] = 2 // set-–º–µ—Ç–æ–¥ —Å–∞–±—Å–∫—Ä–∏–ø—Ç–∞


// –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∞–±—Å—Ç–∫—Ä–∏–ø—Ç—ã (–ø–µ—Ä–µ–≥—Ä—É–∑–∫–∞)

struct Matrix {
    let rows: Int, columns: Int
    var grid: [Double]

    init(rows: Int, columns: Int) {
      self.rows = rows
      self.columns = columns
      grid = Array(repeating: 0.0, count: rows * columns)
    }

    func indexIsValid(row: Int, column: Int) -> Bool {
      return row >= 0 && row < rows && column >= 0 && column < columns
    }
    
    func printMatrix() -> Void {
        var index = 0
        var str = ""
        for _ in 0..<rows {
            for _ in 0..<columns {
                str += String(grid[index]) + " "
                index += 1
            }
            print(str)
            str = ""
        }
    }

    subscript(row: Int, column: Int) -> Double {
      get {
          assert(indexIsValid(row: row, column: column), "Index out of range")
          return grid[(row * columns) + column]
      }
      set {
          assert(indexIsValid(row: row, column: column), "Index out of range")
          grid[(row * columns) + column] = newValue
      }
    }
}

var matrix = Matrix(rows: 5, columns: 5)
//matrix.printMatrix()
print()
matrix[0,0] = 5.0
matrix[2,2] = 1.0
//matrix.printMatrix()

// MARK: - –î–æ–º–∞—à–∫–∞

// MARK: - –®–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞ (–õ–µ–≥–∫–∏–π —É—Ä–æ–≤–µ–Ω—å)
//1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø —à–∞—Ö–º–∞—Ç–Ω–∞—è –¥–æ—Å–∫–∞.
//2. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–±—Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞–µ—Ç —Ü–≤–µ—Ç –∫–ª–µ—Ç–∫–∏ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ –∫–ª–µ—Ç–∫–∏ (–±—É–∫–≤–∞ –∏ —Ü–∏—Ñ—Ä–∞).
//3. –ï—Å–ª–∏ —é–∑–µ—Ä –æ—à–∏–±—Å—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ - –≤—ã–¥–∞–≤–∞–π—Ç–µ –Ω–∏–ª

print("\n TASK 1: Chess")

let lettersDict : [String : Int] = ["a": 1, "b": 2, "c": 3, "d": 4, "e": 5, "f": 6, "g": 7, "h": 8]

struct ChessBoard {
    
    var columns : Int
    var rows : Int
    
    func indexIsValid(row: Int, column: Int) -> Bool {
      return (row > 0 && row <= rows) && (column > 0 && column <= columns)
    }
    
    subscript(columnLetter: String, rowIndex: Int) -> String? {
        let columnIndex = lettersDict[columnLetter.lowercased()] ?? -1
        if indexIsValid(row: rowIndex, column: columnIndex) {
            let color = ((rowIndex % 2) == (columnIndex % 2)) ? "Black" : "White"
            return color
        } else {
            return nil
        }
    }
    
}

let board = ChessBoard(columns: 8, rows: 8)
board["d",3]
board["a",9]
board["r",2]

// MARK: - –ö—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏ (–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å)
//1. –°–æ–∑–¥–∞—Ç—å —Ç–∏–ø, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π —Å–æ–±–æ–π –ø–æ–ª–µ –¥–ª—è –∏–≥—Ä—ã –≤ –∫—Ä–µ—Å—Ç–∏–∫–∏ –Ω–æ–ª–∏–∫–∏
//–ù–∞ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –∏–∑ –∑–Ω–∞—á–µ–Ω–∏–π: –ü—É—Å—Ç–æ, –ö—Ä–µ—Å—Ç–∏–∫, –ù–æ–ª–∏–∫
//–î–æ–±–∞–≤—å—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∫—Ä–∞—Å–∏–≤–æ —Ä–∞—Å–ø–µ—á–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª–µ
//2. –î–æ–±–∞–≤—å—Ç–µ —Å–∞–±—Å–∫—Ä–∏–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∫–ª–µ—Ç–∫–∏ –ø–æ —Ä—è–¥—É –∏ —Å—Ç–æ–ª–±—Ü—É,
//–ø—Ä–∏—á–µ–º –≤—ã –¥–æ–ª–∂–Ω—ã —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ø–∞–¥–∞–ª–∞ –µ—Å–ª–∏ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä—è–¥ –∏–ª–∏ —Å—Ç–æ–ª–±–µ—Ü.
//3. –¢–∞–∫–∂–µ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç–µ–º, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫—Ä–µ—Å—Ç–∏–∫ –ª–∏–±–æ –Ω–æ–ª–∏–∫ —Ç—É–¥–∞, –≥–¥–µ —É–∂–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å.
// –î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª—è.
//4. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –¥–æ–±–∞–≤—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã—á–∏—Å–ª–∏—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è

print("\n TASK 2: XOs")

enum TypeOfCell : String {
    case cross = "‚ùå"
    case zero = "üÖæÔ∏è"
    case empty = "‚óªÔ∏è"
}

struct XO {
    var columns : Int
    var rows : Int
    var cells : [TypeOfCell]
    
    init(columns: Int, rows: Int) {
        self.columns = columns
        self.rows = rows
        cells = [TypeOfCell](repeating: .empty, count: columns * rows)
    }
    
    subscript(column: Int, row: Int) -> TypeOfCell? {
        get {
            assert(indexIsValid(row: row, column: column), "Index out of range")
            return cells[((row - 1) * columns) + column - 1]
        }
        set {
            assert(indexIsValid(row: row, column: column), "Index out of range")
            let cell = cells[((row - 1) * columns) + column - 1]
            switch cell { // —á—Ç–æ —Å–µ–π—á–∞—Å –≤ –∫–ª–µ—Ç–∫–µ
            case .cross, .zero:
                print("–û—à–∏–±–∫–∞! –í –∫–ª–µ—Ç–∫–µ —É–∂–µ —á—Ç–æ-—Ç–æ –µ—Å—Ç—å!")
            case .empty:
                cells[((row - 1) * columns) + column - 1] = newValue ?? .empty
            }
            
        }
    }
        
    func printBoard() -> Void {
        var index = 0
        var str = ""
        for _ in 0..<rows {
            for _ in 0..<columns {
                str += cells[index].rawValue + " "
                index += 1
            }
            print(str)
            str = ""
        }
    }
        
    func indexIsValid(row: Int, column: Int) -> Bool {
        return (row > 0 && row <= rows) && (column > 0 && column <= columns)
    }
    
    func checkWinner() -> TypeOfCell? {
        
        var testArray: [TypeOfCell] = []
        var uniqueElements: Set<TypeOfCell>
                             
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ—á–∫—É
        for i in 0..<rows {
            let rowArray = cells[i*rows..<i*rows+rows]
            uniqueElements = Set(rowArray)
            if (uniqueElements.count == 1 && uniqueElements.first != .empty) {
                return uniqueElements.first!
            }
        }
        
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–æ–ª–±–µ—Ü
        for i in 0..<columns {
            testArray.removeAll()
            for index in 0..<columns {
                testArray.append(cells[i + index*columns])
            }
            uniqueElements = Set(testArray)
            if (uniqueElements.count == 1 && uniqueElements.first != .empty) {
                return uniqueElements.first!
            }
        }
        
        // –≥–ª–∞–≤–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å ([1,1], [2,2], [3,3])
        testArray.removeAll()
        for i in 1...rows {
            for j in 1...rows {
                if (i == j) {
                    testArray.append(self[i,j]!)
                }
            }
        }
        uniqueElements = Set(testArray)
        if (uniqueElements.count == 1 && uniqueElements.first != .empty) {
            return uniqueElements.first!
        }
        
        // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–æ–Ω–∞–ª—å ([3,1], [2,2], [1,3])
        testArray.removeAll()
        for i in 1...rows {
            for j in 1...rows {
                if (i + j == rows + 1) {
                    testArray.append(self[i,j]!)
                }
            }
        }
        uniqueElements = Set(testArray)
        if (uniqueElements.count == 1 && uniqueElements.first != .empty) {
            return uniqueElements.first!
        }
        
        return nil
    }
    
}

var xoS = XO(columns: 3, rows: 3)
xoS.printBoard()
xoS[1,1] = .cross
xoS[2,2] = .cross
xoS[3,3] = .cross

print()
xoS.printBoard()
if let winner = xoS.checkWinner() {
    print("\n\(winner.rawValue) won!")
}


// MARK: - –ú–æ—Ä—Å–∫–æ–π –±–æ–π (–¢—è–∂–µ–ª—ã–π —É—Ä–æ–≤–µ–Ω—å)
//1. –°–æ–∑–¥–∞–π—Ç–µ —Ç–∏–ø –∫–æ—Ä–∞–±–ª—å, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ–±–æ–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫. –í –Ω–µ–º –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–¥–Ω–æ–º–µ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–ø–æ–ø–∞—Ö–∏–≤–∞–µ—Ç —Å–∞–±—Å–∫—Ä–∏–ø—Ç–æ–º). –ö–æ—Ä–∞–±–ª—å –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–∏–º–∞—Ç—å –≤—ã—Å—Ç—Ä–µ–ª—ã –ø–æ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –∏ –≤—ã—á–∏—Å–ª—è—Ç—å –∫–æ–≥–¥–∞ –æ–Ω —É–±–∏—Ç

//2. –°–æ–∑–¥–∞–π—Ç–µ –¥–≤—É–º–µ—Ä–Ω–æ–µ –ø–æ–ª–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥—É—Ç —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å—Å—è –∫–æ—Ä–∞–±–ª–∏ –≤—Ä–∞–≥–∞. –°—Ç—Ä–µ–ª—è–π—Ç–µ –ø–æ –ø–æ–ª—é –∏ –ø–æ–¥–±–µ–π—Ç–µ –≤—Ä–∞–∂–µ—Å–∫–∏–π —á–µ—Ç—ã—Ä–µ—Ö —Ç—Ä—É–±–Ω–∏–∫ :)

//3. –°–¥–µ–ª–∞–π—Ç–µ –¥–ª—è –ø—Ä–∏–ª–∏—á–∏—è –ø–∞—Ä—É –≤—ã—Å—Ç—Ä–µ–ª–æ–≤ –º–∏–º–æ, –∫—Ä–∞—Å–∏–≤–µ–Ω—å–∫–æ –≤—Å–µ –≤—ã–≤–æ–¥–∏—Ç–µ –Ω–∞ —ç–∫—Ä–∞–Ω :)

print("\n TASK 3: Sea Batle")

struct Point {
    let x: Int
    let y: Int
    var image: String?
}

class Ship {
    
    enum Directions {
        case vertical
        case horizontal
    }
    
    enum ShipTypes : Int {
        case P1 = 1
        case P2
        case P3
        case P4 // = 4
        var lenght : Int {
            return self.rawValue
        }
    }
    
    enum ImageOfShip : String {
        case normal = "üü¢"
        case bitten = "üî•"
        case dead = "‚õîÔ∏è"
    }
        
    var direction : Directions
    var mainPoint : Point
    var cells : [ImageOfShip]
    var type: ShipTypes
    var shipStatus : ImageOfShip {
        let testSet = Set(self.cells)
        // –µ—Å–ª–∏ –≤—Å–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, —Ç–æ –ª–∏–±–æ —É–±–∏—Ç, –ª–∏–±–æ –∂–∏–≤–æ–π
        // –µ—Å–ª–∏ —Ä–∞–∑–Ω—ã–µ, —Ç–æ —Ç–æ—á–Ω–æ –ø–æ–¥–±–∏—Ç, –Ω–æ –µ—â–µ –∂–∏–≤–æ–π
        switch testSet.count {
        case 1 where testSet.first == .normal: return .normal
        case 1 where testSet.first == .bitten: return .dead
        case 1 where testSet.first == .dead: return .dead
        default: return .bitten
        }
    }
    
    init(mainPoint: Point, shipType: ShipTypes, direction: Directions) {
        self.direction = direction
        self.mainPoint = mainPoint
        self.type = shipType
        self.cells = Array(repeating: .normal, count: shipType.lenght)
    }
        
    // –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –ø–∞–ª—É–±–µ –∫–æ—Ä–∞–±–ª—è
    subscript(index: Int) -> ImageOfShip? {
        get {
            if (1...cells.count ~= index) { return cells[index - 1] }
            else { return nil }
        }
        set {
            if (cells[index - 1] == .normal) { // –µ—Å–ª–∏ –±—ã–ª–æ –Ω–æ—Ä–º, —Ç–æ —Ç–µ–ø–µ—Ä—å –æ–Ω –ø–æ–¥–±–∏—Ç
                cells[index - 1] = .bitten
            }
            if (shipStatus == .dead) { // –µ—Å–ª–∏ –ø–æ–¥–±–∏—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–∞–ª—É–±–∞, —Ç–æ –∫–æ—Ä–∞–±–ª—å —É–±–∏—Ç
                for i in 0..<cells.count {
                    cells[i] = .dead
                }
            }
        }
    }
    
    func printShip() -> Void {
        print(terminator: " ")
        for i in self.cells {
            print(i.rawValue, terminator: "")
        }
        print()
    }
    
}

class SeaBatle {
    struct SizeOfField {
        var w: Int // columns
        var h: Int // rows
        static var defaultSize : SizeOfField {
            return SizeOfField(w: 10, h: 10)
        }
    }
    
    var ships: [Ship]
    var size: SizeOfField
    var grid: [Point] = []
    var isDefaultSize : Bool {
        return (size.w,size.h) == (SizeOfField.defaultSize.w,SizeOfField.defaultSize.h)
    }
    var aliveShips : Int = 0
    
    init(size: SizeOfField = SizeOfField.defaultSize) {
        self.size = size
        self.ships = []
        for y in 1...size.h {
            for x in 1...size.w {
                self.grid.append(Point(x: x, y: y, image: "‚¨úÔ∏è"))
            }
        }
    }
        
    func shot(x shotX: Int, y shotY: Int) -> Void {
        if (1...size.w ~= shotX) && (1...size.h ~= shotY) {
            
            guard let targetIndex = self.grid.firstIndex(where: { $0.x == shotX && $0.y == shotY }) else {
                print("there's no such cell")
                return
            }
            self.grid[targetIndex].image = "‚ùå"
                        
            for ship in self.ships { // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫–æ—Ä–∞–±–ª—å
                let shipPoint = ship.mainPoint
                for deckNumber in 0..<ship.type.lenght { // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –ø–∞–ª—É–±—É –Ω–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –Ω–µ–µ
                    
                    if ((ship.direction == .horizontal) && (shipPoint.x + deckNumber == shotX && shipPoint.y == shotY)) ||
                       ((ship.direction == .vertical) && (shipPoint.x == shotX && shipPoint.y - deckNumber == shotY)) {
                        print("–ï—Å—Ç—å –ø—Ä–æ–±–∏—Ç–∏–µ!")
                        ship[deckNumber+1] = .bitten
                        self.grid[targetIndex].image = ship[deckNumber+1]!.rawValue
                        if ship[deckNumber+1]! == .dead {
                            self.aliveShips -= 1
                            print("–£–±–∏—Ç –∫–æ—Ä–∞–±–ª—å! –û—Å—Ç–∞–ª–æ—Å—å \(aliveShips) –∏–∑ \(ships.count)")
                        }
                    }

                }
            }
            
            printField()
            
        } else {
            print("–æ—à–∏–±–∫–∞, —Ç–∞–∫–æ–π –∫–ª–µ—Ç–∫–∏ –Ω–µ—Ç –Ω–∞ –ø–æ–ª–µ")
        }
    }
    
    func printField() {

        // —Å–Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Å—Ç–∞—Ç—É—Å –∫–æ—Ä–∞–±–ª–µ–π
        for ship in self.ships {
            let point = ship.mainPoint
            for deckNumber in 0..<ship.type.lenght { // —Ä–∏—Å—É–µ–º –ø–∞–ª—É–±—ã
                if ship.direction == .horizontal {
                    if let targetIndex = self.grid.firstIndex(where: { $0.x == point.x + deckNumber && $0.y == point.y}) {
                        self.grid[targetIndex].image = ship[deckNumber+1]!.rawValue
                    }
                } else {
                    if let targetIndex = self.grid.firstIndex(where: { $0.x == point.x && $0.y == point.y - deckNumber}) {
                        self.grid[targetIndex].image = ship[deckNumber+1]!.rawValue
                    }
                }
            }
        }
        
        let indexArray = Array(arrayLiteral: "0Ô∏è‚É£","1Ô∏è‚É£","2Ô∏è‚É£","3Ô∏è‚É£","4Ô∏è‚É£","5Ô∏è‚É£","6Ô∏è‚É£","7Ô∏è‚É£","8Ô∏è‚É£","9Ô∏è‚É£","üîü")
        var str1: String = ""
        if self.isDefaultSize {
            str1 += indexArray[0]
            for i in 1...size.w {
                str1 += indexArray[i]
            }
            str1 += indexArray[0]
        }
        print(str1)
        
        var str2 = ""
        for y in (1...size.h).reversed() {
            if self.isDefaultSize { str2 += indexArray[y] }
            for x in 1...size.w {
                if let ind = grid.firstIndex(where: { ($0.x == x) && ($0.y == y) }) {
                    str2 += grid[ind].image!
                }
            }
            if self.isDefaultSize { str2 += indexArray[y] }
            print(str2)
            str2 = ""
        }
        
        print(str1 + "\n")
    }
    
    func isShipValid(pos: Point, dir: Ship.Directions, type: Ship.ShipTypes) -> Bool {

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫–æ—Ä–∞–±–ª–∏
        for ship in self.ships {
            let posOfExisting = ship.mainPoint
            if (posOfExisting.x == pos.x && posOfExisting.y == pos.y) {
                print("–í —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ —É–∂–µ —Å—Ç–æ–∏—Ç –∫–æ—Ä–∞–±–ª—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–ª–µ—Ç–∫—É")
                return false
            }
        }
        
        switch (x: pos.x, y: pos.y, dir: dir, type: type) {
        
            // —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–≤—ã—Ö–æ–¥—è—Ç –ª–∏ –æ–Ω–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã)
            case let (x,y,_,_) where (x <= 0) || (y <= 0):
                print("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏!")
                return false
            case let (x,y,_,_) where (x > size.w) || (y > size.h):
                print("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –ø–æ–ª—è!")
                return false
                
            // –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ + —Ç–∏–ø
            case let (x,_,d,t) where (d == .horizontal):
                let emptyCells = size.w - x // —Å–∫–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ —Å–ø—Ä–∞–≤–∞
                if (emptyCells < t.rawValue - 1) {
                    print("–ö–æ—Ä–∞–±–ª—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–∞–±–ª—å –ø–æ–º–µ–Ω—å—à–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é")
                    return false
                } else {
                    return true
                }
            case let (_,y,d,t) where (d == .vertical):
                
                let humanY = size.h - y + 1
                // 1 = 10
                // 2 = 9
                // ...
                // 10 = 1
                // X = x - 10 + 1
                let emptyCells = size.h - humanY // —Å–∫–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–ª–µ—Ç–æ–∫ —Å–Ω–∏–∑—É
                
                if (emptyCells < t.rawValue - 1) {
                    print("–ö–æ—Ä–∞–±–ª—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, —á—Ç–æ–±—ã —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–≥–æ –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ—Ä–∞–±–ª—å –ø–æ–º–µ–Ω—å—à–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é")
                    return false
                } else {
                    return true
                }
                
            default: break
        }
        return true
    }
    
    func addShip(ship: Ship) {
        if isShipValid(pos: ship.mainPoint, dir: ship.direction, type: ship.type) {
            self.ships.append(ship)
            self.aliveShips += 1
            printField()
        }
    }
    
}

var seaField = SeaBatle()
seaField.grid

seaField.addShip(ship: Ship(mainPoint: Point(x: 1, y: 1), shipType: .P2, direction: .horizontal))
seaField.addShip(ship: Ship(mainPoint: Point(x: 3, y: 8), shipType: .P4, direction: .vertical))
seaField.addShip(ship: Ship(mainPoint: Point(x: 8, y: 6), shipType: .P2, direction: .horizontal))

seaField.shot(x: 1, y: 1)
seaField.shot(x: 2, y: 1)
seaField.shot(x: 1, y: 2)
seaField.shot(x: 4, y: 4)
seaField.shot(x: 10, y: 10)
seaField.shot(x: 7, y: 6)
seaField.shot(x: 8, y: 6)
seaField.shot(x: 9, y: 6)

seaField.ships.count
